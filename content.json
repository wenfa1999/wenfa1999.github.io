{"meta":{"title":"阿发的个人博客","subtitle":"吾生也有涯，而知也无涯","description":"","author":"阿发","url":"https://wenfa1999.github.io","root":"/"},"pages":[{"title":"about","date":"2020-12-02T15:16:20.000Z","updated":"2020-12-02T15:16:53.170Z","comments":true,"path":"about/index.html","permalink":"https://wenfa1999.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-12-02T15:12:23.000Z","updated":"2020-12-02T15:14:02.343Z","comments":true,"path":"categories/index.html","permalink":"https://wenfa1999.github.io/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2020-12-02T15:17:12.000Z","updated":"2020-12-02T15:17:43.210Z","comments":true,"path":"contact/index.html","permalink":"https://wenfa1999.github.io/contact/index.html","excerpt":"","text":""},{"title":"404","date":"2020-12-02T15:20:21.000Z","updated":"2020-12-02T15:21:29.439Z","comments":true,"path":"404/index.html","permalink":"https://wenfa1999.github.io/404/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-12-02T15:15:29.000Z","updated":"2020-12-02T15:48:35.121Z","comments":true,"path":"tags/index.html","permalink":"https://wenfa1999.github.io/tags/index.html","excerpt":"","text":""},{"title":"friends","date":"2020-12-02T15:17:55.000Z","updated":"2020-12-02T15:18:41.528Z","comments":true,"path":"friends/index.html","permalink":"https://wenfa1999.github.io/friends/index.html","excerpt":"","text":""}],"posts":[{"title":"使用StreamCMD在Windows上搭建饥荒服务器","slug":"Don't-Starve-Together-Dedicated-Server","date":"2021-01-27T05:05:54.000Z","updated":"2021-01-27T06:23:13.842Z","comments":true,"path":"2021/01/27/don-t-starve-together-dedicated-server/","link":"","permalink":"https://wenfa1999.github.io/2021/01/27/don-t-starve-together-dedicated-server/","excerpt":"","text":"由于唯一的一台Linux服务器被征用，只能在Windows上搭建饥荒的服务器了。如果在游戏内开房间的话有太多的限制，所以就选择了像Linux一样运行一个独立的饥荒服务器。写下此文，备用。 SteamCMD部分 下载SteamCMD。前往https://developer.valvesoftware.com/wiki/SteamCMD#Windows下载Windows版的SteamCMD，得到一个压缩包，里面包含steamcmd.exe，选择一个目录解压，假设解压在C盘根目录下的SteamCMD此时的文件结构：C:\\ 初始化SteamCMD。双击循行steamcmd，它会自动下载部分资源，下载完成后会有类似Steam&gt;的命令提示符。 登录SteamCMD。输入login anonymous登录到Steam匿名账号。（注意登陆后还是提示Steam&gt;，命令提示符没有任何变化） 下载Don’t Starve Together Dedicated。输入app_update 343050 validate下载软件，其中343050是他的编号，validate表示下载完成后进行验证。 饥荒服务器部分 建立文件夹。打开文档-Klei-DoNotStarveTogether新建一个文件夹MyDedicatedServer,然后在里边再新建两个文件夹以及一个文件,文件夹分别为Caves以及Master，文件为cluster.ini，并且将下列文本复制粘贴进去：[GAMEPLAY] game_mode = survival max_players = 6 pvp = false pause_when_empty = true [NETWORK] cluster_name = 服务器名称 cluster_description = 服务器描述 cluster_password = 服务器密码 cluster_intention = cooperative whitelist_slots = 0 cluster_language = zh [MISC] console_enabled = true [SHARD] shard_enabled = true bind_ip = 127.0.0.1 master_ip = 127.0.0.1 master_port = 11001 cluster_key = dst 部分字段说明： 字段 说明 game_mode 游戏模式，可选：survival, endless, wilderness max_players 最大在线玩家数 pvp 是否允许玩家间进行对战 pause_when_empty 服务器内没有玩家时暂停 cluster_name 服务器名称 cluster_description 服务器描述 cluster_password 服务器密码，留空表示没有 cluster_intention 游戏风格，可选：cooperative,competitive,social,madness，仅作描述，无实际用途 whitelist_slots 为白名单用户预留的位置 cluster_language 服务器语言 console_enabled 是否开启控制台（作弊用） max_snapshots 最大快照数，即可回滚的天数 shard_enabled 服务器共享，开启洞穴的服务器必须设置为true bind_ip 服务器监听地址 master_ip master服务器的IP master_port 监听master服务器的UDP端口，所有连接至master服务器的非master服务器必须相同 cluster_key 连接密码，每台服务器必须相同 前往KLei官网获取token。鉴于部分网络通过浏览器打开官网无法通过steam登录，这里我们通过饥荒客户端主界面的账号打开KLei官网，就可以自动登录。登陆后默认的打开用户信息，点击游戏-《饥荒：联机版》的游戏服务器，然后再添加新服务器这里任意输入一个服务器名字，然后添加新服务器，就可以获得token,复制下来。在前面新建的MyDedicatedServer目录下新建文件cluster_token.txt，将token粘贴进去保存。 配置地图。在master目录内，新建server.ini文件，复制粘贴如下文本：[NETWORK] server_port = 10999 [SHARD] is_master = true [ACCOUNT] encode_user_path = true 同理，进入Caves目录，新建`server.ini文件，复制粘贴如下文本： [NETWORK] server_port = 10998 [SHARD] is_master = false name = Caves id = 1331760033 [ACCOUNT] encode_user_path = true [STEAM] master_server_port = 27017 authentication_port = 8767 那么，服务器部分基本配置完毕。启动服务器在桌面新建一个名为startDST.bat的文件，右键-编辑，用记事本打开，复制如下文本粘贴进去并保存：cd \"c:\\steamcmd\\steamapps\\common\\Don't Starve Together Dedicated Server\\bin\" start dontstarve_dedicated_server_nullrenderer -console -cluster MyDedicatedServer -shard Master start dontstarve_dedicated_server_nullrenderer -console -cluster MyDedicatedServer -shard Caves 之后双击startDST.bat就可以启动服务器了。 至于如何迁徙存档以及配置mod，改日再更。","categories":[{"name":"Tutorials","slug":"Tutorials","permalink":"https://wenfa1999.github.io/categories/Tutorials/"}],"tags":[{"name":"Game","slug":"Game","permalink":"https://wenfa1999.github.io/tags/Game/"},{"name":"Dont't Starve Together","slug":"Dont-t-Starve-Together","permalink":"https://wenfa1999.github.io/tags/Dont-t-Starve-Together/"}],"author":"阿发"},{"title":"各数据类型大小","slug":"data-words","date":"2021-01-26T16:00:00.000Z","updated":"2021-02-01T05:28:29.092Z","comments":true,"path":"2021/01/27/data-words/","link":"","permalink":"https://wenfa1999.github.io/2021/01/27/data-words/","excerpt":"","text":"数据类型 16位编译器 32位编译器 64位编译器 char 1字节 1字节 1字节 char* 2字节 4字节 8字节 short int 2字节 2字节 2字节 int 2字节 4字节 4字节 unsigned int 2字节 4字节 4字节 float 4字节 4字节 4字节 double 8字节 8字节 8字节 long 4字节 4字节 8字节 long long 8字节 8字节 8字节 unsigned long 4字节 4字节 8字节","categories":[{"name":"others","slug":"others","permalink":"https://wenfa1999.github.io/categories/others/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://wenfa1999.github.io/tags/CS/"}],"author":"阿发"},{"title":"一些诗","slug":"poems-2020","date":"2021-01-05T16:00:00.000Z","updated":"2021-01-27T04:11:16.692Z","comments":true,"path":"2021/01/06/poems-2020/","link":"","permalink":"https://wenfa1999.github.io/2021/01/06/poems-2020/","excerpt":"","text":"时间：2020年05月06日 小镇农人皆酣睡，夏夜凉风迎面吹。 圆月高高依旧照，古时枯骨几轮回？ 时间：2020年12月11日 他们来了，他们喜光。 于是毫无征兆地，那里充满了光。 欢声笑语愈加热烈，那么原先在这里的蝎子们呢？ 他们不知道，大家都不知道。 于是，蝎子们一部分变成了他们，另一部分选择迁徙。 但是这都无关紧要， 因为他们，为这儿带来了光。 突然，还有零星可数的蝎子， 在他们脚下，用尽最后的一丝力气，举起了尾巴； 象征性地。 时间：2018年12月20日 东风未暖冬意浓， 雁落何方行色匆。 最是一年临尽日， 美得学子尽忘钟。","categories":[{"name":"poems","slug":"poems","permalink":"https://wenfa1999.github.io/categories/poems/"}],"tags":[{"name":"Poems","slug":"Poems","permalink":"https://wenfa1999.github.io/tags/Poems/"},{"name":"Literature","slug":"Literature","permalink":"https://wenfa1999.github.io/tags/Literature/"}],"author":"阿发"},{"title":"KMP算法","slug":"KMP-Algorithm","date":"2020-12-04T06:15:00.000Z","updated":"2021-01-27T04:35:02.973Z","comments":true,"path":"2020/12/04/kmp-algorithm/","link":"","permalink":"https://wenfa1999.github.io/2020/12/04/kmp-algorithm/","excerpt":"","text":"发明者D.E.Knuth，J.H.Morris 和 V.R.Pratt 原理1. 根据待查找字符串建立一张表 根据待查找字符串 target 的长度建立数组 table，数组长度为代待查字符串的长度。 列出待查字符串的所有前缀子字符串。 从数组下标为 1 处开始填写最长公共前后缀长度，同时 table[0]=-1。 最长公共前后缀的计算（以 target 为”ababca”为例） a：公共前后缀为 0（很明显，长度为 1 的字串公共前后缀恒为 0，即 table[1]=0）。 ab：公共前后缀为 0，即 table[2]=0。 aba：最长公共前后缀为 1，因为首位均为 a，即 table[3]=1。 abab：最长公共前后缀为“ab”，即 table[4]=2。 ababc：公共前后缀为 0，即 table[5]=0。 最后整张表内容如下： Name 0 1 2 3 4 5 table -1 0 0 1 2 0 发现规律： 从第一个前缀子字符串a开始，往后下一个前缀子字符串如果在前一个最长公共前后缀的最后一位的下标的下一位与最后一个字符相等，则该字串的最长公共前后缀为前一字串的最长公共前后缀+1；否则为0。 2. 开始匹配 匹配规则 两个指针i和j分别指向源字符串和目标字符串的第0位字符。如果匹配相等，i和j分别往后移。如果匹配不相等，那么取出此时table表中同个下标对应的值index，并让j指向目标字符串以index为下标的值。 实现C++： #include &lt;iostream&gt; #include &lt;stdlib.h&gt; #include &lt;vector&gt; using namespace std; void NEXT(const string &amp;T,vector&lt;int&gt; &amp;next) { //按模式串生成vector,next(T.size()) next[0] = -1; for(int i = 1; i &lt; T.size(); i++) { int j = next[i - 1]; while(T[i] != T[j + 1] &amp;&amp; j &gt;= 0) j = next[j]; //递推计算 if(T[i] == T[j + 1]) next[i] = j + 1; else next[i] = 0; } } string::size_type COUNT_KMP(const string &amp;S,const string &amp;T) { //利用模式串T的next函数求T在主串S中的个数count的KMP算法 //其中T非空， vector&lt;int&gt; next(T.size()); NEXT(T,next); string::size_type index,count=0; for(index=0; index &lt; S.size(); ++index) { int pos=0; string::size_type iter = index; while(pos &lt; T.size() &amp;&amp; iter&lt;S.size()) { if(S[iter] == T[pos]) { ++iter; ++pos; } else { if(pos == 0) ++iter; else pos = next[pos - 1] + 1; } } if(pos == T.size() &amp;&amp; (iter - index) == T.size()) ++count; } return count; } int main() { string S,T; cout&lt;&lt;\"请输入主串（参照的）\"&lt;&lt;endl; cin&gt;&gt;S; cout&lt;&lt;\"请输入子串（要查找的）\"&lt;&lt;endl; cin&gt;&gt;T; string::size_type count =COUNT_KMP(S,T); cout&lt;&lt;\"一共有 \"&lt;&lt;count&lt;&lt;\" 个子串\"&lt;&lt;endl; return 0; }","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://wenfa1999.github.io/categories/Algorithm/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://wenfa1999.github.io/tags/C/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://wenfa1999.github.io/tags/Algorithm/"}],"author":"阿发"},{"title":"Hello World","slug":"hello-world","date":"2020-09-26T03:02:55.089Z","updated":"2020-09-26T03:02:55.089Z","comments":true,"path":"2020/09/26/hello-world/","link":"","permalink":"https://wenfa1999.github.io/2020/09/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"WIndows10上VMWare安装Ubuntu","slug":"VMWare-Win","date":"2020-01-31T16:00:00.000Z","updated":"2021-02-01T05:43:07.002Z","comments":true,"path":"2020/02/01/vmware-win/","link":"","permalink":"https://wenfa1999.github.io/2020/02/01/vmware-win/","excerpt":"","text":"Ubuntu系统镜像下载前往Ubuntu官网https://ubuntu.com/download/desktop下载镜像，这里选择的是Ubuntu 20.04.1 LTS，带有LTS的版本表示长期维护版本，譬如Ubuntu 20.04.1 LTS就会支持到2025年4月。当然也可以下载其他版本，对于大部分个人用户而言并无太大区别。 当然也可以前往国内镜像网站镜像下载，譬如阿里云镜像站https://mirrors.aliyun.com/。注意需要点击的是OS镜像，而不是镜像列表下的各个系统。 VMWare安装Ubuntu新建虚拟机 打开VMWare-创建新的虚拟机； 典型(推荐)（T），下一步； 安装客户机操作系统，这里要注意选择**稍后安装操作系统(S)**，下一步； 客户机操作系统选择Linux(L)**，版本选择Ubuntu64位**，下一步； 虚拟机名称自定义，位置推荐放在专门的有较大剩余空间的文件夹下，下一步； 磁盘容量20G以上，如果准备长期使用或者在里边存一些工作/学习文件建议40G起步，下一步； 完成。 开启虚拟机前需要先添加系统镜像，点击编辑虚拟机设置，在CD/DVD选项下选择*使用ISO映像文件(M)**，然后点击浏览*，选择下载好的系统镜像。选择好后点击确定。 开启虚拟机首先是磁盘检查，可以鼠标单机虚拟机屏幕，然后输入ctrl + C跳过。 进入向导界面，选择语言”中文”，当然按照自己的需求进行选择。 点击“安装 Ubuntu”(Install Ubuntu)，键盘布局默认就好，点击继续。 更新和其它软件，选择最小安装或者正常安装都行，关掉安装Ubuntu时下载更新。 因为此时的服务器用的是官方服务器，下载速度会比较慢，可以先安装系统，安装完成后换源再进行更新。 安装类型默认是清除整个磁盘并安装Ubuntu，直接点击现在安装。 时区自选，然后是账户信息，同样自定义，输入完成无误后点击继续。 开始安装。 在复制完文件后可能会进行一下下载，可以点击左侧三角形展开，在下载的时候点击右边的Skip暂时跳过这些步骤，同理是为了节省时间。 安装完成后重启。 一些需要的配置重启后登录账户。 换源点击左下角九宫格图标显示应用程序，找到软件和更新打开。 隔壁会有一个叫软件更新器的，长得非常像，一般来说右边的是我们要打开的软件。 打开后可以看到有个“中国 的服务器”，点击，然后选择”其他站点…“，然后在中国列表下选择一个镜像源，个人习惯选择阿里云的(mirrors.aliyun.com)，选择好后点击“选择服务器”，会有弹窗需要输入密码。确定密码后返回，点击“关闭”，会提醒可用软件的列表信息已过时，点击“重新载入(R)”，更新软件列表。 下载/更新软件在桌面右键-在终端中打开，打开Ubuntu的终端。输入下面的命令： sudo apt update 输入后键入回车，会提示输入密码，注意在终端中输入Linux用户密码并不会有任何的显示，输入完成后再键入回车。 执行完上面的命令后一般会提示有很多软件可以进行更新，先不管，而是接着输入下面的命令： sudo apt -y install open-vm-tools 这个就相当于以往的VMWare Tools，不过这个版本安装更为简便。 安装完成后有一个很明显的现象：Ubuntu屏幕大小变成了VMWare虚拟机的屏幕大小，并且可以随意改变屏幕大小。 然后是下一条命令： sudo apt -y upgrade 这条命令就是在下更新软件，相当于安装过程中为了节省时间而关闭的下载更新。 VMWare注意事项 对于大部分笔记本来说一般都水有两个以上的网卡(以太网以及WIFI)，部分电脑的虚拟机可能会偶尔没有网络，可以进行手动设置。 点击VMWare菜单栏的编辑(E)**，虚拟网络编辑器**。 点击下方的**更改设置(C)**，会申请管理员权限，确定并重新加载完成后可以看到，桥接模式默认是桥接至自动，我们可以在虚拟机系统没有网络的时候试着手动选择对应的网卡，确定后虚拟机内部系统应该就有网络了。 当然大部分情况下是不需要手动设置的。","categories":[{"name":"Tutorials","slug":"Tutorials","permalink":"https://wenfa1999.github.io/categories/Tutorials/"}],"tags":[{"name":"VMWare","slug":"VMWare","permalink":"https://wenfa1999.github.io/tags/VMWare/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://wenfa1999.github.io/tags/Ubuntu/"},{"name":"Windows10","slug":"Windows10","permalink":"https://wenfa1999.github.io/tags/Windows10/"}],"author":"阿发"}],"categories":[{"name":"Tutorials","slug":"Tutorials","permalink":"https://wenfa1999.github.io/categories/Tutorials/"},{"name":"others","slug":"others","permalink":"https://wenfa1999.github.io/categories/others/"},{"name":"poems","slug":"poems","permalink":"https://wenfa1999.github.io/categories/poems/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://wenfa1999.github.io/categories/Algorithm/"}],"tags":[{"name":"Game","slug":"Game","permalink":"https://wenfa1999.github.io/tags/Game/"},{"name":"Dont't Starve Together","slug":"Dont-t-Starve-Together","permalink":"https://wenfa1999.github.io/tags/Dont-t-Starve-Together/"},{"name":"CS","slug":"CS","permalink":"https://wenfa1999.github.io/tags/CS/"},{"name":"Poems","slug":"Poems","permalink":"https://wenfa1999.github.io/tags/Poems/"},{"name":"Literature","slug":"Literature","permalink":"https://wenfa1999.github.io/tags/Literature/"},{"name":"C++","slug":"C","permalink":"https://wenfa1999.github.io/tags/C/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://wenfa1999.github.io/tags/Algorithm/"},{"name":"VMWare","slug":"VMWare","permalink":"https://wenfa1999.github.io/tags/VMWare/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://wenfa1999.github.io/tags/Ubuntu/"},{"name":"Windows10","slug":"Windows10","permalink":"https://wenfa1999.github.io/tags/Windows10/"}]}