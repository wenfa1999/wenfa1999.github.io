{"meta":{"title":"官文发的个人博客","subtitle":"","description":"","author":"官文发","url":"https://wenfa1999.github.io","root":"/"},"pages":[{"title":"about","date":"2020-12-02T15:16:20.000Z","updated":"2020-12-02T15:16:53.170Z","comments":true,"path":"about/index.html","permalink":"https://wenfa1999.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-12-02T15:12:23.000Z","updated":"2020-12-02T15:14:02.343Z","comments":true,"path":"categories/index.html","permalink":"https://wenfa1999.github.io/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2020-12-02T15:17:12.000Z","updated":"2020-12-02T15:17:43.210Z","comments":true,"path":"contact/index.html","permalink":"https://wenfa1999.github.io/contact/index.html","excerpt":"","text":""},{"title":"404","date":"2020-12-02T15:20:21.000Z","updated":"2020-12-02T15:21:29.439Z","comments":true,"path":"404/index.html","permalink":"https://wenfa1999.github.io/404/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-12-02T15:15:29.000Z","updated":"2020-12-02T15:48:35.121Z","comments":true,"path":"tags/index.html","permalink":"https://wenfa1999.github.io/tags/index.html","excerpt":"","text":""},{"title":"friends","date":"2020-12-02T15:17:55.000Z","updated":"2020-12-02T15:18:41.528Z","comments":true,"path":"friends/index.html","permalink":"https://wenfa1999.github.io/friends/index.html","excerpt":"","text":""}],"posts":[{"title":"KMP算法","slug":"KMP-Algorithm","date":"2020-12-04T06:15:00.000Z","updated":"2020-12-04T06:45:42.619Z","comments":true,"path":"2020/12/04/kmp-algorithm/","link":"","permalink":"https://wenfa1999.github.io/2020/12/04/kmp-algorithm/","excerpt":"","text":"发明者D.E.Knuth，J.H.Morris 和 V.R.Pratt 原理1. 根据待查找字符串建立一张表 根据待查找字符串 target 的长度建立数组 table，数组长度为代待查字符串的长度。 列出待查字符串的所有前缀子字符串。 从数组下标为 1 处开始填写最长公共前后缀长度，同时 table[0]=-1。 最长公共前后缀的计算（以 target 为”ababca”为例） a：公共前后缀为 0（很明显，长度为 1 的字串公共前后缀恒为 0，即 table[1]=0）。 ab：公共前后缀为 0，即 table[2]=0。 aba：最长公共前后缀为 1，因为首位均为 a，即 table[3]=1。 abab：最长公共前后缀为“ab”，即 table[4]=2。 ababc：公共前后缀为 0，即 table[5]=0。 最后整张表内容如下： Name 0 1 2 3 4 5 table -1 0 0 1 2 0 发现规律： 从第一个前缀子字符串a开始，往后下一个前缀子字符串如果在前一个最长公共前后缀的最后一位的下标的下一位与最后一个字符相等，则该字串的最长公共前后缀为前一字串的最长公共前后缀+1；否则为0。 2. 开始匹配 匹配规则 两个指针i和j分别指向源字符串和目标字符串的第0位字符。如果匹配相等，i和j分别往后移。如果匹配不相等，那么取出此时table表中同个下标对应的值index，并让j指向目标字符串以index为下标的值。 实现C++：","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://wenfa1999.github.io/categories/Algorithm/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://wenfa1999.github.io/tags/C/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://wenfa1999.github.io/tags/Algorithm/"}],"author":"阿发"},{"title":"Hello World","slug":"hello-world","date":"2020-09-26T03:02:55.089Z","updated":"2020-09-26T03:02:55.089Z","comments":true,"path":"2020/09/26/hello-world/","link":"","permalink":"https://wenfa1999.github.io/2020/09/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://wenfa1999.github.io/categories/Algorithm/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://wenfa1999.github.io/tags/C/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://wenfa1999.github.io/tags/Algorithm/"}]}